name: Template Cleanup
on:
  push:
    branches: [main]

jobs:

  # Run a cleaning process only if the workflow is triggered by the non-"intellij-platform-plugin-template" repository.
  template-cleanup:
    name: Template Cleanup
    runs-on: ubuntu-latest
    if: github.event.repository.name != 'Android-Starter'
    permissions:
      contents: write
    steps:

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Cleanup project
      - name: Cleanup
        run: |
          set -e  # 遇到错误立即退出
          export LC_CTYPE=C
          export LANG=C

          # Prepare variables
          NAME="${GITHUB_REPOSITORY##*/}"
          ACTOR=$(echo $GITHUB_ACTOR | tr '[:upper:]' '[:lower:]')
          SAFE_NAME=$(echo $NAME | sed 's/[^a-zA-Z0-9]//g' | tr '[:upper:]' '[:lower:]')
          SAFE_ACTOR=$(echo $ACTOR | sed 's/[^a-zA-Z0-9]//g' | tr '[:upper:]' '[:lower:]')
          GROUP="com.$SAFE_ACTOR.$SAFE_NAME"
          # 将连字符替换为空格，每个单词首字母大写，作为应用显示名称
          DISPLAY_NAME=$(echo "$NAME" | sed 's/-/ /g' | awk '{for(i=1;i<=NF;i++)sub(/./,toupper(substr($i,1,1)),$i)}1')

          echo "处理变量:"
          echo "NAME: $NAME"
          echo "ACTOR: $ACTOR"
          echo "SAFE_NAME: $SAFE_NAME"
          echo "SAFE_ACTOR: $SAFE_ACTOR"
          echo "GROUP: $GROUP"
          echo "DISPLAY_NAME: $DISPLAY_NAME"

          # Replace build.gradle.kts with $GROUP
          echo "更新 build.gradle.kts 中的包名..."
          if [ -f "app/build.gradle.kts" ]; then
            # 使用临时文件进行替换，避免直接修改原文件可能带来的问题
            cat app/build.gradle.kts | \
            perl -pe "s/namespace = \"com\.mcallzbl\.android_starter\"/namespace = \"$GROUP\"/g" | \
            perl -pe "s/applicationId = \"com\.mcallzbl\.android_starter\"/applicationId = \"$GROUP\"/g" > app/build.gradle.kts.tmp
            
            # 检查临时文件是否创建成功且内容不为空
            if [ -s app/build.gradle.kts.tmp ]; then
              mv app/build.gradle.kts.tmp app/build.gradle.kts
              echo "build.gradle.kts 更新成功"
              # 显示更新后的内容进行验证
              echo "更新后的 build.gradle.kts 包名配置:"
              grep -E "namespace|applicationId" app/build.gradle.kts
            else
              echo "错误: build.gradle.kts 更新失败"
              exit 1
            fi
          else
            echo "错误: app/build.gradle.kts 文件不存在"
            exit 1
          fi

          # Replace settings.gradle.kts with $SAFE_NAME
          echo "更新 settings.gradle.kts 中的项目名称..."
          if [ -f "settings.gradle.kts" ]; then
            # 使用更精确的替换模式
            cat settings.gradle.kts | \
            perl -pe 's/(rootProject\.name\s*=\s*)"[^"]*"/$1"'"$NAME"'"/' > settings.gradle.kts.tmp
            
            if [ -s settings.gradle.kts.tmp ]; then
              mv settings.gradle.kts.tmp settings.gradle.kts
              echo "settings.gradle.kts 更新成功"
              echo "更新后的 settings.gradle.kts 项目名称配置:"
              grep "rootProject.name" settings.gradle.kts
            else
              echo "错误: settings.gradle.kts 更新失败"
              exit 1
            fi
          else
            echo "错误: settings.gradle.kts 文件不存在"
            exit 1
          fi

          # Update .idea/.name file
          echo "更新 .idea/.name 文件..."
          mkdir -p .idea
          echo "$NAME" > .idea/.name
          echo ".idea/.name 更新成功，内容为: $(cat .idea/.name)"

          # Update application display name
          echo "更新应用显示名称..."
          if [ -f "app/src/main/res/values/strings.xml" ]; then
            cat app/src/main/res/values/strings.xml | \
            perl -pe "s|<string name=\"app_name\">.*?</string>|<string name=\"app_name\">$DISPLAY_NAME</string>|g" > app/src/main/res/values/strings.xml.tmp
            
            if [ -s app/src/main/res/values/strings.xml.tmp ]; then
              mv app/src/main/res/values/strings.xml.tmp app/src/main/res/values/strings.xml
              echo "strings.xml 更新成功"
              echo "更新后的应用名称:"
              grep "app_name" app/src/main/res/values/strings.xml
            else
              echo "错误: strings.xml 更新失败"
              exit 1
            fi
          else
            echo "错误: strings.xml 文件不存在"
            exit 1
          fi

          # Replace placeholders in the template-cleanup files
          echo "替换模板文件中的占位符..."
          if [ -d ".github/template-cleanup" ]; then
            sed -i.bak "s/%NAME%/$NAME/g" .github/template-cleanup/*
            sed -i.bak "s/%REPOSITORY%/${GITHUB_REPOSITORY/\//\\/}/g" .github/template-cleanup/*
            sed -i.bak "s/%GROUP%/$GROUP/g" .github/template-cleanup/*
          fi

          # Replace template package name in project files with $GROUP
          echo "替换源文件中的包名..."
          find app/src -type f -name "*.kt" -o -name "*.java" -o -name "*.xml" | while read file; do
            echo "处理文件: $file"
            sed -i.bak "s|com.mcallzbl.android_starter|$GROUP|g" "$file"
          done

          # Move content
          echo "创建新的包名目录结构..."
          mkdir -p "app/src/main/java/${GROUP//.//}"
          mkdir -p "app/src/test/java/${GROUP//.//}"
          mkdir -p "app/src/androidTest/java/${GROUP//.//}"

          echo "移动文件到新的包名目录..."
          if [ -d "app/src/main/java/com/mcallzbl/android_starter" ]; then
            cp -R app/src/main/java/com/mcallzbl/android_starter/* "app/src/main/java/${GROUP//.//}/" || echo "警告: 主源代码目录复制失败"
          fi
          
          if [ -d "app/src/test/java/com/mcallzbl/android_starter" ]; then
            cp -R app/src/test/java/com/mcallzbl/android_starter/* "app/src/test/java/${GROUP//.//}/" || echo "警告: 测试代码目录复制失败"
          fi
          
          if [ -d "app/src/androidTest/java/com/mcallzbl/android_starter" ]; then
            cp -R app/src/androidTest/java/com/mcallzbl/android_starter/* "app/src/androidTest/java/${GROUP//.//}/" || echo "警告: Android测试代码目录复制失败"
          fi

          # Verify new directories
          echo "验证新目录结构..."
          if [ ! -d "app/src/main/java/${GROUP//.//}" ]; then
            echo "错误: 新的主源代码目录未成功创建"
            exit 1
          fi

          # Cleanup
          echo "清理旧文件和目录..."
          rm -rf \
            .github/ISSUE_TEMPLATE \
            .github/readme \
            .github/template-cleanup \
            .github/workflows/template-cleanup.yml \
            .github/workflows/template-verify.yml \
            .idea/icon.png \
            app/src/main/java/com/mcallzbl/android_starter \
            app/src/test/java/com/mcallzbl/android_starter \
            app/src/androidTest/java/com/mcallzbl/android_starter \
            CODE_OF_CONDUCT.md \
            LICENSE

          # Cleanup backup files
          echo "清理临时文件..."
          find . -name "*.bak" -type f -delete

          echo "模板清理完成"

      # Commit modified files
      - name: Commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Template cleanup"

      # Push changes
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          branch: main
          github_token: ${{ secrets.GITHUB_TOKEN }}